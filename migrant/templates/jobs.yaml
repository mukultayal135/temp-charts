{{- range .Values.migrations }}
{{- if eq .enable true }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $.Release.Name  }}-{{ .env.DB_NAME | replace "_" "-" }}-{{ randAlphaNum 5 | lower }}
  annotations: {}
  labels:
    job: {{ $.Release.Name }}-migration
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: migrator-container
        image: {{ $.Values.image }}
        command: ["/bin/sh", "-c"]
        args:
            - |
              #!/bin/sh
              set -e
              set -o pipefail
              if [ -z $(REPO_URL)  ]; then
                echo "Please enter REPO_URL"
                exit 1
              fi
              if [ -z $(REPO_NAME)  ]; then
                echo "Please enter REPO_NAME"
                exit 1
              fi
              if [ -z $DB_HOST  ]; then
                echo "Please enter DB_HOST"
                exit 1
              fi
              if [ -z $DB_NAME  ]; then
                echo "Please enter DB_NAME"
                exit 1
              fi
              if [ -z $(SCRIPT_LOCATION)  ]; then
                SCRIPT_LOCATION="."
              fi
              
              apk add git
              echo "git cloning"
              git clone $REPO_URL
              cd $(REPO_NAME)
              if [ -z $(BRANCH)  ]; then
                echo "we are on main commit"
              else
                echo "git checkout on"
                echo $BRANCH
                # Check out the specific commit hash
                git checkout $BRANCH
              fi

              if [ -z $(COMMIT_HASH)  ]; then
                echo "we are on latest commit"
              else
                echo "git checkout on"
                echo $COMMIT_HASH
                # Check out the specific commit hash
                git checkout $COMMIT_HASH
              fi

              # Verify that you are on the correct branch and commit
              CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
              CURRENT_COMMIT=$(git rev-parse HEAD)

              echo "Current branch: $CURRENT_BRANCH"
              echo "Current commit: $CURRENT_COMMIT"
              echo "Migrating to version (0 for latest)"
              echo $MIGRATE_TO_VERSION;

              DB_CRED=""
              if [ -n "$(DB_USER)"  ]; then
                  DB_CRED="$DB_USER:$DB_PASSWORD@"
              fi
              
              if [ "$(DB_TYPE)" = "postgres" ]; then
                echo "migration for postgres"
                if [ $MIGRATE_TO_VERSION -eq "0" ]; then
                  migrate -path $(SCRIPT_LOCATION) -database postgres://$DB_CRED$DB_HOST:$DB_PORT/$DB_NAME?"$PARAM" up;
                else
                  migrate -path $(SCRIPT_LOCATION) -database postgres://$DB_CRED$DB_HOST:$DB_PORT/$DB_NAME?"$PARAM" goto $MIGRATE_TO_VERSION;
                fi
              elif [ "$(DB_TYPE)" = "mongodb" ]; then
                echo "migration for mongodb"
                if [ $MIGRATE_TO_VERSION -eq "0" ]; then
                  migrate -path $(SCRIPT_LOCATION) -database mongodb://$DB_CRED$DB_HOST:$DB_PORT/$DB_NAME?"$PARAM" up;
                else
                  migrate -path $(SCRIPT_LOCATION) -database mongodb://$DB_CRED$DB_HOST:$DB_PORT/$DB_NAME?"$PARAM" goto $MIGRATE_TO_VERSION;
                fi
              elif [ "$(DB_TYPE)" = "mongodb+srv" ]; then
                echo "migration for mongodb"
                if [ $MIGRATE_TO_VERSION -eq "0" ]; then
                  migrate -path $(SCRIPT_LOCATION) -database mongodb+srv://$DB_CRED$DB_HOST:$DB_PORT/$DB_NAME?"$PARAM" up;
                else
                  migrate -path $(SCRIPT_LOCATION) -database mongodb+srv://$DB_CRED$DB_HOST:$DB_PORT/$DB_NAME?"$PARAM" goto $MIGRATE_TO_VERSION;
                fi
              elif [ "$(DB_TYPE)" = "mysql" ]; then
                echo "migration for mysql"
                DB="tcp($DB_HOST:$DB_PORT)"
                if [ $MIGRATE_TO_VERSION -eq "0" ]; then
                  migrate -path $SCRIPT_LOCATION -database mysql://$DB_CRED$DB/$DB_NAME?"$PARAM" up;
                else
                  migrate -path $SCRIPT_LOCATION -database mysql://$DB_CRED$DB_HOST:$DB?"$PARAM" goto $MIGRATE_TO_VERSION;
                fi
              elif [ "$(DB_TYPE)" = "sqlserver" ]; then
                echo "migration for sqlserver"
                if [ $MIGRATE_TO_VERSION -eq "0" ]; then
                  migrate -path $(SCRIPT_LOCATION) -database sqlserver://$DB_CRED$DB_HOST:$DB_PORT?"$PARAM" up;
                else
                  migrate -path $(SCRIPT_LOCATION) -database sqlserver://$DB_CRED$DB_HOST:$DB_PORT?"$PARAM" goto $MIGRATE_TO_VERSION;
                fi
              else
                echo "no database matched"
              fi
              {{- range .post_query }}
              {{ . }}
              {{- end }}
        env:
        {{- range $key, $val := $.Values.database_credentials.env }}
         - name: {{ $key }}
           value: {{ $val | quote }}
        {{- end }}
        {{- range $key, $val := .env }}
         - name: {{ $key }}
           value: {{ $val | quote }}
        {{- end }}
        envFrom:
          {{- range .configMap }}
          - configMapRef:
               name: {{ . }}
          {{- end }}
          # - configMapRef:
          #      name: {{ $.Release.Name  }}-configmap
          {{- range .secret }}
          - secretRef:
              name: {{ . }}
          {{- end }}
          # - secretRef:
          #     name: {{ $.Release.Name  }}-secret
---
{{-  end }}
{{-  end }}
